@{
    ViewData["Title"] = "Fatura Sorgulama";
}

<div class="container mt-4">
    <h2 class="mb-4">Fatura Sorgulama ve Ödeme</h2>

    <!-- Fatura Sorgulama Formu -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Fatura Sorgula</h5>
        </div>
        <div class="card-body">
            <form id="invoiceQueryForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="companySelect" class="form-label">Şirket Seçin</label>
                            <select class="form-select" id="companySelect" required>
                                <option value="">-- Şirket Seçin --</option>
                                @foreach (var company in (ViewBag.Companies as List<TTtasarim.Web.Models.CompanyViewModel>) ?? new List<TTtasarim.Web.Models.CompanyViewModel>())
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="accessNo" class="form-label">Abone / Telefon No</label>
                            <input type="text" class="form-control" id="accessNo" 
                                   placeholder="Örn: 5551234567 veya 2129876543" required>
                            <div class="form-text">Telefon numaranızı veya abone numaranızı girin</div>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search"></i> Fatura Sorgula
                </button>
                <button type="button" class="btn btn-warning ms-2" onclick="testAPIDecimalValues()">
                    <i class="fas fa-flask"></i> Test Decimal API
                </button>
            </form>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="text-center" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
        <p class="mt-2">Faturalar sorgulanıyor...</p>
    </div>

    <!-- Sonuçlar -->
    <div id="invoiceResults" style="display: none;">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Bulunan Faturalar</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Şirket</th>
                                <th>Açıklama</th>
                                <th>Tutar</th>
                                <th>Vade Tarihi</th>
                                <th>Durum</th>
                                <th>İşlem</th>
                            </tr>
                        </thead>
                        <tbody id="invoiceTableBody">
                            <!-- AJAX ile doldurulacak -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- No Results -->
    <div id="noResults" class="alert alert-info" style="display: none;">
        <i class="fas fa-info-circle"></i>
        Girilen bilgilere göre fatura bulunamadı. Lütfen şirket ve abone numarası bilgilerini kontrol edin.
    </div>

    <!-- Error Message -->
    <div id="errorMessage" class="alert alert-danger" style="display: none;">
        <i class="fas fa-exclamation-triangle"></i>
        <span id="errorText"></span>
    </div>

    <!-- Success Message -->
    <div id="successMessage" class="alert alert-success" style="display: none;">
        <i class="fas fa-check-circle"></i>
        <span id="successText"></span>
    </div>
</div>

<!-- Payment Confirmation Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ödeme Onayı</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Bu faturayı ödemek istediğinizden emin misiniz?</p>
                <div id="invoiceDetails">
                    <!-- Fatura detayları buraya gelecek -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-success" id="confirmPayment">
                    <i class="fas fa-credit-card"></i> Ödemeyi Onayla
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let selectedInvoiceId = null;

    // Form submit
    $('#invoiceQueryForm').on('submit', function(e) {
        e.preventDefault();
        queryInvoices();
    });

    // Fatura sorgulama
    function queryInvoices() {
        const companyId = $('#companySelect').val();
        const accessNo = $('#accessNo').val().trim();

        if (!companyId || !accessNo) {
            showError('Lütfen şirket ve abone numarası seçin');
            return;
        }

        // UI güncellemeleri
        hideAllMessages();
        $('#loadingSpinner').show();
        $('#invoiceResults').hide();

        // AJAX çağrısı
        $.post('@Url.Action("QueryInvoices")', {
            companyId: companyId,
            accessNo: accessNo
        })
        .done(function(response) {
            $('#loadingSpinner').hide();
            
            if (response.success) {
                if (response.data && response.data.length > 0) {
                    console.log('API\'den dönen fatura verileri:', response.data);
                    displayInvoices(response.data);
                } else {
                    $('#noResults').show();
                }
            } else {
                showError(response.message || 'Fatura sorgulaması başarısız');
            }
        })
        .fail(function() {
            $('#loadingSpinner').hide();
            showError('Sunucu hatası oluştu');
        });
    }

    // Faturaları tabloda göster
    function displayInvoices(invoices) {
        const tbody = $('#invoiceTableBody');
        tbody.empty();

        console.log('displayInvoices çağırıldı, fatura sayısı:', invoices.length);

        invoices.forEach(function(invoice, index) {
            console.log(`Fatura ${index + 1} detayı:`, {
                id: invoice.id,
                amount: invoice.amount,
                amountType: typeof invoice.amount,
                description: invoice.description,
                companyName: invoice.companyName
            });
            
            // Amount değerini parse etme - daha güvenli yaklaşım
            let numericAmount = 0;
            
            if (invoice.amount !== null && invoice.amount !== undefined) {
                if (typeof invoice.amount === 'number') {
                    numericAmount = invoice.amount;
                } else if (typeof invoice.amount === 'string') {
                    // String ise parse et
                    const parsed = parseFloat(invoice.amount.replace(',', '.'));
                    numericAmount = isNaN(parsed) ? 0 : parsed;
                } else {
                    // Object ise .toString() yap sonra parse et
                    const parsed = parseFloat(invoice.amount.toString().replace(',', '.'));
                    numericAmount = isNaN(parsed) ? 0 : parsed;
                }
            }
            
            console.log(`Fatura ${index + 1} amount parsing:`, {
                original: invoice.amount,
                parsed: numericAmount,
                type: typeof numericAmount
            });
            
            // Tutar formatı - Türk Lirası
            let formattedAmount = '₺0,00';
            if (numericAmount > 0) {
                try {
                    formattedAmount = new Intl.NumberFormat('tr-TR', {
                        style: 'currency',
                        currency: 'TRY',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }).format(numericAmount);
                } catch (e) {
                    console.error('NumberFormat hatası:', e);
                    formattedAmount = `₺${numericAmount.toFixed(2).replace('.', ',')}`;
                }
            }
            
            console.log(`Fatura ${index + 1} final formatted amount:`, formattedAmount);
            
            // Tarih formatı
            let formattedDate = 'Geçersiz tarih';
            try {
                const dateObj = new Date(invoice.dueDate);
                if (!isNaN(dateObj.getTime())) {
                    formattedDate = dateObj.toLocaleDateString('tr-TR');
                }
            } catch (e) {
                console.error('Tarih parse hatası:', e);
            }
            
            const row = `
                <tr>
                    <td>${invoice.companyName || 'Bilinmeyen Şirket'}</td>
                    <td>${invoice.description || 'Açıklama yok'}</td>
                    <td><strong class="text-primary">${formattedAmount}</strong></td>
                    <td>${formattedDate}</td>
                    <td><span class="badge bg-warning">Beklemede</span></td>
                    <td>
                        <button class="btn btn-success btn-sm pay-btn" 
                                data-invoice-id="${invoice.id}"
                                data-amount="${numericAmount}"
                                data-description="${invoice.description || 'Fatura'}"
                                data-company="${invoice.companyName || 'Bilinmeyen'}">
                            <i class="fas fa-credit-card"></i> Öde
                        </button>
                    </td>
                </tr>
            `;
            tbody.append(row);
        });

        $('#invoiceResults').show();
        console.log('Fatura tablosu güncellendi');
    }

    // Ödeme butonu tıklama
    $(document).on('click', '.pay-btn', function() {
        selectedInvoiceId = $(this).data('invoice-id');
        const rawAmount = $(this).data('amount') || 0;
        
        console.log('Ödeme butonu tıklandı:', {
            invoiceId: selectedInvoiceId,
            rawAmount: rawAmount,
            rawAmountType: typeof rawAmount
        });
        
        // Amount'u güvenli şekilde parse et
        let numericAmount = 0;
        if (typeof rawAmount === 'number') {
            numericAmount = rawAmount;
        } else if (typeof rawAmount === 'string') {
            const parsed = parseFloat(rawAmount.replace(',', '.'));
            numericAmount = isNaN(parsed) ? 0 : parsed;
        }
        
        // Türk Lirası formatında göster
        let formattedAmount = '₺0,00';
        if (numericAmount > 0) {
            try {
                formattedAmount = new Intl.NumberFormat('tr-TR', {
                    style: 'currency',
                    currency: 'TRY',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(numericAmount);
            } catch (e) {
                formattedAmount = `₺${numericAmount.toFixed(2).replace('.', ',')}`;
            }
        }
        
        const description = $(this).data('description') || 'Fatura';
        const company = $(this).data('company') || 'Bilinmeyen Şirket';
        
        console.log('Modal bilgileri:', {
            company: company,
            description: description,
            formattedAmount: formattedAmount
        });

        $('#invoiceDetails').html(`
            <strong>Şirket:</strong> ${company}<br>
            <strong>Açıklama:</strong> ${description}<br>
            <strong>Tutar:</strong> <span class="text-primary fs-5">${formattedAmount}</span>
        `);

        $('#paymentModal').modal('show');
    });

    // Ödeme onayı
    $('#confirmPayment').on('click', function() {
        if (!selectedInvoiceId) return;

        const button = $(this);
        button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Ödeniyor...');

        $.post('@Url.Action("PayInvoice")', {
            invoiceId: selectedInvoiceId
        })
        .done(function(response) {
            if (response.success) {
                $('#paymentModal').modal('hide');
                const remainingCredit = response.remainingCredit || 0;
                const numericCredit = typeof remainingCredit === 'string' ? parseFloat(remainingCredit) : remainingCredit;
                const safeCredit = isNaN(numericCredit) ? 0 : numericCredit;
                
                showSuccess(response.message + (response.remainingCredit ? 
                    ` Kalan kredi: ${safeCredit.toLocaleString('tr-TR', {style: 'currency', currency: 'TRY'})}` : ''));
                
                // Faturayı tekrar sorgula
                setTimeout(function() {
                    queryInvoices();
                }, 1500);
            } else {
                showError(response.message || 'Ödeme başarısız');
            }
        })
        .fail(function() {
            showError('Ödeme sırasında hata oluştu');
        })
        .always(function() {
            button.prop('disabled', false).html('<i class="fas fa-credit-card"></i> Ödemeyi Onayla');
        });
    });

    // Test API decimal değerleri
    function testAPIDecimalValues() {
        hideAllMessages();
        $('#loadingSpinner').show();
        
        console.log('Test API endpoint çağırılıyor...');
        
        // API base URL'yi ViewBag'den al
        var apiUrl = '@ViewBag.ApiBaseUrl' + '/api/invoices/test';
        
        console.log('Test API URL:', apiUrl);
        
        $.get(apiUrl)
                .done(function(response) {
                    $('#loadingSpinner').hide();
                    console.log('Test API Response:', response);
                    
                    if (response && response.length > 0) {
                        displayInvoices(response);
                        showSuccess('Test verileri başarıyla yüklendi! Console\'da detayları kontrol edin.');
                    } else {
                        showError('Test API\'den veri dönmedi');
                    }
                })
                .fail(function(xhr, status, error) {
                    $('#loadingSpinner').hide();
                    console.error('Test API hatası:', error);
                    showError('Test API çağrısı başarısız: ' + error);
                });
    }

    // Helper functions
    function hideAllMessages() {
        $('#noResults, #errorMessage, #successMessage').hide();
    }

    function showError(message) {
        hideAllMessages();
        $('#errorText').text(message);
        $('#errorMessage').show();
    }

    function showSuccess(message) {
        hideAllMessages();
        $('#successText').text(message);
        $('#successMessage').show();
    }
</script>
}
